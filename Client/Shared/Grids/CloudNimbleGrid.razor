@typeparam TItem

<GridTopRow ViewModel="@ViewModel" NewRow="@(async () => await NewRow())" />
<RadzenDataGrid @ref="gridInstance"
                AllowFiltering="true"
                AllowPaging="true"
                AllowSorting="true"
                Count="@ViewModel.ResultCount"
                Data="@ViewModel.Entities"
                EditMode="DataGridEditMode.Single"
                IsLoading="ViewModel.LoadingStatus == LoadingStatus.Loading"
                TItem="TItem"
                SelectionMode="DataGridSelectionMode.Single"
                Value="@Value"
                RowUpdate="@OnCreateOrUpdateRow"
                RowCreate="@OnCreateOrUpdateRow"
                PageSize="@ViewModel.PageSize"
                RowSelect="@(async item => await SetValue(item))"
                RowDoubleClick="@(args => EditRow(args.Data))"
                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                Responsive="true"
                Style="height: calc(100vh - 260px); overflow-y: scroll;"
                EmptyText="@(ViewModel.LoadingStatus == LoadingStatus.Loading ? "Loading..." : "The BurnRate API returned no results.")">
    <Columns>

        @Columns

        <RadzenDataGridColumn TItem="TItem" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="116px">
            <Template Context="context">
                <button class="btn btn-sm btn-primary" @onclick="@(() => EditRow(context))"><i class="far fa-edit" /></button>
            </Template>
            <EditTemplate Context="context">
                <button class="btn btn-sm btn-success mr-1" @onclick="@(async () => await UpdateRow(context))"><i class="far fa-save" /></button>
                <button class="btn btn-sm btn-danger" @onclick="@(async () => await CancelEdit(context))"><i class="far fa-window-close" /></button>
            </EditTemplate>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="TItem" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="60px">
            <Template Context="context">
                <button class="btn btn-sm btn-danger" @onclick="@(() => DeleteRow(context))"><i class="far fa-trash-alt" /></button>
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>
@if (ShowFooter)
{
    <GridBottomRow ViewModel="@ViewModel" Load="@ReloadGrid" />
}

@code {

    [Parameter]
    public RenderFragment Columns { get; set; }

    [Parameter]
    public AdminViewModelBase<TItem> ViewModel { get; set; }

    [Parameter]
    public List<TItem> Value { get; set; }

    [Parameter]
    public EventCallback<List<TItem>> ValueChanged { get; set; }

    [Parameter]
    public bool ShowFooter { get; set; } = true;

    private RadzenDataGrid<TItem> gridInstance;

    async Task SetValue(TItem value)
    {
        Value = new List<TItem>() { value };
        await ValueChanged.InvokeAsync(Value);
    }

    async Task NewRow()
    {
        var item = (TItem)Activator.CreateInstance(typeof(TItem));
        await gridInstance.InsertRow(item);
        await SetValue(item);
    }

    async Task EditRow(TItem entity)
    {
        //Value = entity;
        await gridInstance.EditRow(entity);
    }

    async Task UpdateRow(TItem entity)
    {
        await gridInstance.UpdateRow(entity);
    }

    async Task CancelEdit(TItem entity)
    {
        gridInstance.CancelEditRow(entity);
        await ReloadGrid();
    }

    async Task DeleteRow(TItem entity)
    {
        if (ViewModel.Entities.Contains(entity))
        {
            await ViewModel.Delete(entity);
            await gridInstance.Reload();
        }
        else
        {
            gridInstance.CancelEditRow(entity);
        }
    }

    async Task OnCreateOrUpdateRow(TItem entity)
    {
        await ViewModel.Save(entity);
        //await SetValue(default);
        await gridInstance.Reload();
    }

    async Task ReloadGrid()
    {
        await ViewModel.Load(true);
        await SetValue(default);
        await gridInstance.Reload();
    }

}

@typeparam TItem

<GridTopRow ViewModel="@ViewModel" NewRow="@(async () => await NewRow())" />
<RadzenGrid @ref="gridInstance" 
            AllowFiltering="true" 
            AllowPaging="true" 
            PageSize="@ViewModel.PageSize" 
            AllowSorting="true" 
            EditMode="DataGridEditMode.Single"
            Data="@ViewModel.Entities" 
            TItem="TItem" 
            Value="@Value" 
            RowUpdate="@OnCreateOrUpdateRow" 
            RowCreate="@OnCreateOrUpdateRow"
            RowSelect="@(async item => await SetValue(item))"
            RowDoubleClick="@(item => EditRow(item))"
            EmptyText="@(ViewModel.LoadingStatus == LoadingStatus.Loading ? "Loading..." : "The BurnRate API returned no results.")" 
            Responsive="true" Style="height: calc(100vh - 260px); overflow-y: scroll;">
    <Columns>

        @Columns

        <RadzenGridColumn TItem="TItem" Bubble="false" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="116px">
            <Template Context="context">
                <button class="btn btn-primary" @onclick="@(() => EditRow(context))"><iconify-icon data-icon="fa-regular:edit" data-height="16" style="color: #FFF;"></iconify-icon></button>
            </Template>
            <EditTemplate Context="context">
                <button class="btn btn-success mr-1" @onclick="@(async () => await UpdateRow(context))"><iconify-icon data-icon="fa-regular:save" data-height="16" style="color: #FFF;"></iconify-icon></button>
                <button class="btn btn-danger" @onclick="@(async () => await CancelEdit(context))"><iconify-icon data-icon="fa-regular:window-close" data-height="16" style="color: #FFF;"></iconify-icon></button>
            </EditTemplate>
        </RadzenGridColumn>

        <RadzenGridColumn TItem="TItem" Bubble="false" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="60px">
            <Template Context="context">
                <button class="btn btn-danger" @onclick="@(() => DeleteRow(context))"><iconify-icon data-icon="fa-regular:trash-alt" data-height="16" style="color: #FFF;"></iconify-icon></button>
            </Template>
        </RadzenGridColumn>
    </Columns>
</RadzenGrid>
@if (ShowFooter)
{
    <GridBottomRow ViewModel="@ViewModel" Load="@ReloadGrid" />
}

@code {

    [Parameter]
    public RenderFragment Columns { get; set; }

    [Parameter]
    public AdminViewModelBase<TItem> ViewModel { get; set; }

    [Parameter]
    public TItem Value { get; set; }

    [Parameter]
    public EventCallback<TItem> ValueChanged { get; set; }

    [Parameter]
    public bool ShowFooter { get; set; } = true;

    private RadzenGrid<TItem> gridInstance;

    async Task SetValue(TItem value)
    {
        Value = value;
        await ValueChanged.InvokeAsync(Value);
    }

    async Task NewRow()
    {
        var item = (TItem)Activator.CreateInstance(typeof(TItem));
        await gridInstance.InsertRow(item);
        await SetValue(item);
    }

    void EditRow(TItem entity)
    {
        //Value = entity;
        gridInstance.EditRow(entity);
    }

    async Task UpdateRow(TItem entity)
    {
        await gridInstance.UpdateRow(entity);
    }

    async Task CancelEdit(TItem entity)
    {
        gridInstance.CancelEditRow(entity);
        await ReloadGrid();
    }

    async Task DeleteRow(TItem entity)
    {
        if (ViewModel.Entities.Contains(entity))
        {
            await ViewModel.Delete(entity);
            await gridInstance.Reload();
        }
        else
        {
            gridInstance.CancelEditRow(entity);
        }
    }

    async Task OnCreateOrUpdateRow(TItem entity)
    {
        await ViewModel.Save(entity);
        await SetValue(default);
        await gridInstance.Reload();
    }

    async Task ReloadGrid()
    {
        await ViewModel.Load(true);
        await SetValue(default);
        await gridInstance.Reload();
    }

}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using CloudNimble.BlazorEssentials;
using Microsoft.AspNetCore.Components;
using Radzen;
using RadzenGridProblem.Client.Models;
using RadzenGridProblem.Core;
using System.Net.Http;
using System.Threading.Tasks;

namespace RadzenGridProblem.Client.ViewModels
{

    /// <summary>
    /// 
    /// </summary>
    public partial class IndexViewModel : AdminViewModelBase<Company>
    {

        #region Constructors

        /// <summary>
        /// 
        /// </summary>
        /// <param name="notificationService"></param>
        /// <param name="navigationManager"></param>
        /// <param name="httpClientFactory"></param>
        /// <param name="apiClient"></param>
        /// <param name="configuration"></param>
        /// <param name="appState"></param>
        public IndexViewModel(NotificationService notificationService, NavigationManager navigationManager, IHttpClientFactory httpClientFactory, ConfigurationBase configuration, AdminAppState appState) 
            : base(notificationService, navigationManager, httpClientFactory, configuration, appState)
        {
            ConstructorInternal();
        }

        #endregion

        #region Partial Methods

        /// <summary>
        /// 
        /// </summary>
        partial void ConstructorInternal();

        /// <summary>
        /// 
        /// </summary>
        partial void SaveInternal();

        #endregion

        #region Public Methods

        /// <summary>
        /// 
        /// </summary>
        /// <param name="entity"></param>
        /// <returns></returns>
        public override async Task Save(Company entity)
        {
            SaveInternal();
            await base.Save(entity);
        }

        #endregion

    }

}
